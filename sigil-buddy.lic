custom_require.call(%w(common common-travel))

class SigilBuddy
  include DRC
  include DRCT
  
  def initialize
    settings = get_settings
    search_sigils = settings.search_sigils
    season = getSeason
    
    # arg_definitions = [
      # [
        # { name: 'sigil', regex: /[a-z]+/i, optional: false, description: 'Sigil to hunt' }
        
      # ]
    # ]

    # args = parse_args(arg_definitions, true)
    
    search_sigils.each do | sigil |
      @sigil_rooms = get_data('sigils')[settings.hometown][season][sigil]
      if @sigil_rooms.nil?
        echo "### ERROR: No rooms found for sigil #{sigil} in hometown #{settings.hometown} in the #{season} ###"
        exit
      end
      @sigil_rooms = @sigil_rooms.shuffle
    
      findSigil(sigil)
    end
  end
  
  def findSigil(sigil)
    @sigil_rooms.each do  | room |
      walk_to(room)
      wait_for_script_to_complete('sigil',[sigil])
      
    end
  end
  
  def getSeason
    case bput('time',/It is currently ([a-z]+)/)
    when /It is currently ([a-z]+)/
      return Regexp.last_match(1)
    end
  end
end

SigilBuddy.new